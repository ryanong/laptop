#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

less_fancy_echo() {
  printf "%b\n" "$1"
}

git_clone() {
  if [ ! -d $2 ]; then
    git clone $1 $2
  else
    less_fancy_echo "... skip cloning $1, already cloned"
  fi

  true
}

fancy_echo "Setting OSX settings ..."

  # General UI/UX
  #

  # Disable the sound effects on boot
  sudo nvram SystemAudioVolume=%80

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # Trackpad, mouse, keyboard, Bluetooth accessories, and input
  #

  # Disable press-and-hold for keys in favour of key repeat.
  defaults write -g ApplePressAndHoldEnabled -bool false

  # Set a really fast key repeat.
  defaults write NSGlobalDomain KeyRepeat -int 1

  # Disable auto-correct
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  # Screen
  #

  # Require password immediately after sleep or screen saver begins
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Disable shadow in screenshots
  defaults write com.apple.screencapture disable-shadow -bool true

  # Dock
  #

  # Remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0
  # Reduce the animation when hiding/showing the Dock
  defaults write com.apple.dock autohide-time-modifier -float 0.15

  # Automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # Make Dock icons of hidden applications translucent
  defaults write com.apple.dock showhidden -bool true

  # Make Dock more transparent
  defaults write com.apple.dock hide-mirror -bool true

  # Finder
  #

  # Set Desktop as the default location for new Finder windows
  # For other paths, use `PfLo` and `file:///full/path/here/`
  defaults write com.apple.finder NewWindowTarget -string "PfDe"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

  # Finder: show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true

  # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Finder: show status bar
  defaults write com.apple.finder ShowStatusBar -bool true

  # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true

  # Finder: allow text selection in Quick Look
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Display full POSIX path as Finder window title
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  # When performing a search, search the current folder by default
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Always open everything in Finder's column view.
  # defaults write com.apple.Finder FXPreferredViewStyle clmv
  defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

  # Show the ~/Library folder.
  chflags nohidden ~/Library

  # Time Machine
  #

  # Prevent Time Machine from prompting to use new hard drives as backup volume
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

less_fancy_echo "Restarting affected apps, some of these changes require a logout/restart ..."

  for app in "cfprefsd" "Finder" "SystemUIServer"; do
    killall "${app}" > /dev/null 2>&1
  done


fancy_echo "installing oh my zsh"
(sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)")

fancy_echo "starting thoughtbot laptop script"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/thoughtbot/laptop/master/mac)"

fancy_echo "Initialize SSH ..."
  if [ ! -d ~/.ssh/ ]; then
    ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
  fi

fancy_echo "installing extra tools"
brew bundle --file=- <<EOF
brew "bat"
brew "diff-so-fancy"
brew "exa"
brew "fd"
brew "fzf"
brew "htop"
brew "neovim"
brew "puma/puma/puma-dev"
brew "ripgrep"
brew "tldr"
cask "caffeine"
cask "iterm2"
cask "itsycal"
cask "shiftit"
cask "textmate"
cask "visual-studio-code"
EOF

fancy_echo "setting up puma-dev"
sudo puma-dev -setup
puma-dev -install -d local

fancy_echo "configuring diff-so-fancy"
git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"
git config --global color.ui true

git config --global color.diff-highlight.oldNormal    "red bold"
git config --global color.diff-highlight.oldHighlight "red bold 52"
git config --global color.diff-highlight.newNormal    "green bold"
git config --global color.diff-highlight.newHighlight "green bold 22"

git config --global color.diff.meta       "11"
git config --global color.diff.frag       "magenta bold"
git config --global color.diff.commit     "yellow bold"
git config --global color.diff.old        "red bold"
git config --global color.diff.new        "green bold"
git config --global color.diff.whitespace "red reverse"

fancy_echo "installing base16-shell"
git_clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell

grep -qF -- "# Base16 Shell" ~/.zshrc || cat <<EOF >> ~/.zshrc
# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"
EOF

fancy_echo "cloning dotfiles"
mkdir -p code
git_clone https://github.com/thoughtbot/dotfiles.git ~/code/dotfiles
git_clone https://github.com/ryanong/vim-bootstrap.git ~/code/vim-bootstrap

fancy_echo "writing rcm settings"
cat <<EOF > "$HOME/.rcrc"
EXCLUDES="README*.md LICENSE zsh* rcrc Brewfile vimrc.bundles vim/* init.vim"
DOTFILES_DIRS="$HOME/code/vim-bootstrap $HOME/code/dotfiles"
EOF

fancy_echo "running rcup"
rcup -K

fancy_echo "installing vim plugins "
sh ~/code/vim-bootstrap/hooks/post-up

touch "$HOME"/.psqlrc.local

